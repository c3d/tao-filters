// ****************************************************************************
//  filters.tbl                                                     Tao project
// ****************************************************************************
//
//   File Description:
//
//     Definition of the interface between XLR and native code
//     for the "Filters" module.
//
//
//
//
//
//
//
// ****************************************************************************
// This software is property of Taodyne SAS - Confidential
// Ce logiciel est la propriété de Taodyne SAS - Confidentiel
//  (C) 2011 Baptiste Soulisse <baptiste.soulisse@taodyne.com>
//  (C) 2011 Taodyne SAS
// ****************************************************************************

// ============================================================================
// 
//   Filtering amount
// 
// ============================================================================

PREFIX(SetFilteringAmount, tree, "filtering_amount",
       PARM(a, real, ),
       return filtering_amount(self, a),
       GROUP(module.Filters)
       SYNOPSIS("Set the filtering amount"))
PREFIX(GetFilteringAmount, real, "filtering_amount", ,
       return filtering_amount(self),
       GROUP(module.Filters)
       SYNOPSIS("Set the filtering amount"))



// ============================================================================
// 
//   Two-pass gaussian filter
// 
// ============================================================================

PREFIX(GaussianH,  tree, "gaussian_h",
       PARM(w, integer, )
       PARM(h, integer, )
       PARM(n, integer, ),
       return gaussian_pass(w, h, n, false),
       GROUP(module.Filters)
       SYNOPSIS("Apply a horizontal gaussian filter on the current texture.")
       DESCRIPTION("Apply a gaussian filter on the current texture."
                   "It can be used to add blur on an image for instance"))

PREFIX(GaussianV,  tree, "gaussian_v",
       PARM(w, integer, )
       PARM(h, integer, )
       PARM(n, integer, ),
       return gaussian_pass(w, h, n, true),
       GROUP(module.Filters)
       SYNOPSIS("Apply a vertical gaussian filter on the current texture.")
       DESCRIPTION("Apply a gaussian filter on the current texture."
                   "It can be used to add blur on an image for instance"))



// ============================================================================
//
//   Convolution filters
//
// ============================================================================

PREFIX(Gaussian3X3,  tree, "gaussian_3x3_filter",
       PARM(w, integer, )
       PARM(h, integer, ),
       return gaussian(w, h),
       GROUP(module.Filters)
       SYNOPSIS("Apply a gaussian filter on the current texture.")
       DESCRIPTION("Apply a gaussian filter on the current texture."
                   "It can be used to add blur on an image for instance"))

PREFIX(Mean,  tree, "mean_filter",
       PARM(w, integer, )
       PARM(h, integer, ),
       return mean(w, h),
       GROUP(module.Filters)
       SYNOPSIS("Apply a mean filter on the current texture.")
       DESCRIPTION("Apply a mean filter on the current texture."
                   "It can be used to remove noise of an image for instance."))

PREFIX(Emboss,  tree, "emboss_filter",
       PARM(w, integer, )
       PARM(h, integer, ),
       return emboss(w, h),
       GROUP(module.Filters)
       SYNOPSIS("Apply a emboss filter on the current texture.")
       DESCRIPTION("Apply a emboss filter on the current texture."
                   "It can be used to simulate 3D of an image for instance."))

PREFIX(Sharpness,  tree, "sharpness_filter",
       PARM(w, integer, )
       PARM(h, integer, ),
       return sharpness(w, h),
       GROUP(module.Filters)
       SYNOPSIS("Apply a sharpness filter on the current texture.")
       DESCRIPTION("Apply a sharpness filter on the current texture."
                   "It can be used to highlight details of an image for instance."))

PREFIX(Laplacian,  tree, "laplacian_filter",
       PARM(w, integer, )
       PARM(h, integer, ),
       return laplacian(w, h),
       GROUP(module.Filters)
       SYNOPSIS("Apply a laplacian filter on the current texture.")
       DESCRIPTION("Apply a laplacian filter on the current texture."
                   "It can be used to detect oulines of an image for instance."))


// ============================================================================
//
//   Erosion filter
//
// ============================================================================

PREFIX(ErodeRadius,  tree, "erode_radius",
       PARM(r, real, ),
       return erode_radius(r),
       GROUP(module.Filters)
       SYNOPSIS("Modify the eroding radius")
       DESCRIPTION("Modify the eroding radius"))

PREFIX(ErodeColor,  tree, "erode_color",
       PARM(r, real, )
       PARM(g, real, )
       PARM(b, real, ),
       return erode_color(r, g, b, -1),
       GROUP(module.Filters)
       SYNOPSIS("Choose the eroding color")
       DESCRIPTION("Choose the eroding color"))

PREFIX(ErodeColorAlpha,  tree, "erode_color",
       PARM(r, real, )
       PARM(g, real, )
       PARM(b, real, )
       PARM(a, real, ),
       return erode_color(r, g, b, a),
       GROUP(module.Filters)
       SYNOPSIS("Choose the eroding color")
       DESCRIPTION("Choose the eroding color"))

PREFIX(Erode,  tree, "erode_filter",
       PARM(x, real, )
       PARM(y, real, )
       PARM(thr, real, ),
       return erode(x, y, thr),
       GROUP(module.Filters)
       SYNOPSIS("Apply Erosion filter")
       DESCRIPTION("Apply an Erosion filter"))


// ============================================================================
//
//   Black and white filter
//
// ============================================================================

PREFIX(BlackAndWhiteLevelsAlpha,  tree, "black_and_white_levels",
       PARM(r, real, )
       PARM(g, real, )
       PARM(b, real, )
       PARM(a, real, ),
       return black_and_white_levels(r, g, b, a),
       GROUP(module.Filters)
       SYNOPSIS("Modify Black & White levels")
       DESCRIPTION("Modify Black & White levels"))

PREFIX(BlackAndWhiteLevels,  tree, "black_and_white_levels",
       PARM(r, real, )
       PARM(g, real, )
       PARM(b, real, ),
       return black_and_white_levels(r, g, b, 0),
       GROUP(module.Filters)
       SYNOPSIS("Modify Black & White levels")
       DESCRIPTION("Modify Black & White levels"))

PREFIX(BlackAndWhite,  tree, "black_and_white_filter", ,
       return black_and_white(),
       GROUP(module.Filters)
       SYNOPSIS("Apply Black & White filter")
       DESCRIPTION("Apply Black & White filter"))
