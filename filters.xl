// Filters module definition
//
// This module defines the filter primitives
//
// Copyright 2010-2011 Taodyne

module_description
    id "c90d3b0b-a461-48d4-a1e0-db212cd3e1ec"
    name "Filtering"
    import_name "Filters"
    description "A module to apply filters on imported images."
    author "Taodyne SAS"
    website "http://www.taodyne.com"
    version 1.006

module_description "fr",
    name "Filtrage"
    description "Permet d'appliquer de nombreux filtres sur les images importÃ©es dans Tao."

// -------------------------------------------------------------------------------------------------------------------
//   Filters primitives
// -------------------------------------------------------------------------------------------------------------------

gaussian iter:integer ->
    /**
    * Apply a gaussian filter on the current texture. It can be used to add blur on an image for instance.
    **/
    gaussian_iter with 1..iter

gaussian_iter i ->
    /**
    * Apply an iterative gaussian filter on the current texture.
    **/
    render_to_texture {gaussian texture_unit, texture_width, texture_height}


mean iter:integer ->
    /**
    * Apply a mean filter on the current texture. It can be used to remove noise of an image for instance.
    **/
    mean_iter with 1..iter

mean_iter i ->
    /**
    * Apply an iterative mean filter on the current texture.
    **/
    render_to_texture {mean texture_unit, texture_width, texture_height}


emboss iter:integer ->
    /**
    * Apply a embross filter on the current texture. It can be used to simulate 3D of an image for instance.
    **/
    emboss_iter with 1..iter

emboss_iter i ->
    /**
    * Apply an iterative emboss filter on the current texture.
    **/
    render_to_texture {emboss texture_unit, texture_width, texture_height}


sharpness iter:integer ->
    /**
    * Apply a sharpness filter on the current texture. It can be used to highlight details of an image for instance.
    **/
    sharpness_iter with 1..iter

sharpness_iter i ->
    /**
    * Apply an iterative sharpness filter on the current texture.
    **/
    render_to_texture {sharpness texture_unit, texture_width, texture_height}


laplacian iter:integer ->
    /**
    * Apply a laplacian filter on the current texture. It can be used to detect oulines of an image for instance.
    **/    
    laplacian_iter with 1..iter

laplacian_iter i ->
    /**
    * Apply an iterative laplacian filter on the current texture.
    **/
    render_to_texture {laplacian texture_unit, texture_width, texture_height}


// -------------------------------------------------------------------------------------------------------------------
//   Eroding filter
// -------------------------------------------------------------------------------------------------------------------

erode x:real, y:real, threshold:real ->
    /**
    * Apply Erosion filter.
    **/
    render_to_texture {erode texture_unit, x, y, threshold}

// -------------------------------------------------------------------------------------------------------------------
//   Black & White filter
// -------------------------------------------------------------------------------------------------------------------

black_and_white ->
    /**
    * Apply Black & White filter
    **/
    render_to_texture black_and_white texture_unit

// -------------------------------------------------------------------------------------------------------------------
//   Render to Texture
// -------------------------------------------------------------------------------------------------------------------

TEXTURE_WIDTH -> 0
TEXTURE_HEIGHT -> 0
TEXTURE_ID -> 0

render_to_texture RENDER_CODE ->
    /**
    * Allow to render the current texture modified by RENDER_CODE to new one.
    **/
    TEXTURE_WIDTH := texture_width
    TEXTURE_HEIGHT := texture_height
    TEXTURE_ID := texture
    frame_texture TEXTURE_WIDTH, TEXTURE_HEIGHT,
        color "white"
        texture TEXTURE_ID
        do RENDER_CODE
        rectangle 0, 0, TEXTURE_WIDTH, TEXTURE_HEIGHT
