// *****************************************************************************
// filters.xl                                                      Tao3D project
// *****************************************************************************
//
// File description:
//
//      Define the image filtering primitives:
//      - Gaussian blur (two-pass)
//      - Mean
//      - Laplacian
//      - Emboss
//      - Sharpness
//
//
//
// *****************************************************************************
// This software is licensed under the GNU General Public License v3
// (C) 2011-2014, Baptiste Soulisse <baptiste.soulisse@taodyne.com>
// (C) 2011-2013, Catherine Burvelle <catherine@taodyne.com>
// (C) 2011-2014,2019, Christophe de Dinechin <christophe@dinechin.org>
// (C) 2011-2014, Jérôme Forissier <jerome@taodyne.com>
// (C) 2011-2014, Baptiste Soulisse <baptiste.soulisse@taodyne.com>
// (C) 2011, Baptiste Soulisse <baptiste.soulisse@taodyne.com>
// *****************************************************************************
// This file is part of Tao3D
//
// Tao3D is free software: you can r redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Tao3D is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Tao3D, in a file named COPYING.
// If not, see <https://www.gnu.org/licenses/>.
// *****************************************************************************

module_description
    id "c90d3b0b-a461-48d4-a1e0-db212cd3e1ec"
    name "Filtering"
    import_name "Filters"
    description "A module to apply filters on imported images."
    author "Taodyne SAS"
    website "http://www.taodyne.com"
    version 1.019

module_description "fr",
    name "Filtrage"
    description "Permet d'appliquer de nombreux filtres sur les images importées dans Tao."



// ============================================================================
//
//    Filter primitives
//
// ============================================================================

gaussian Radius:real ->
// ----------------------------------------------------------------------------
//   Apply a two-pass gaussian filter with the given radius
// ----------------------------------------------------------------------------
    if Radius > 0 then
        render_to_texture { gaussian_h texture_width, texture_height, integer Radius }
        render_to_texture { gaussian_v texture_width, texture_height, integer Radius }


gaussian RH:real, RV:real ->
// ----------------------------------------------------------------------------
//    Apply a gaussian filter with different vertical and horizontal radii
// ----------------------------------------------------------------------------
    if RH > 0 then
        render_to_texture { gaussian_h texture_width, texture_height, integer RH }
    if RV > 0 then
        render_to_texture { gaussian_v texture_width, texture_height, integer RV }


gaussian ->
// ----------------------------------------------------------------------------
//   Apply a default 3x3 gaussian filter (special hard-coded case)
// ----------------------------------------------------------------------------
    render_to_texture {gaussian_3x3_filter texture_width, texture_height}


mean ->
// ----------------------------------------------------------------------------
//   Apply mean filter on the current texture
// ----------------------------------------------------------------------------
    render_to_texture {mean_filter texture_width, texture_height}


emboss ->
// ----------------------------------------------------------------------------
//   Apply emboss filter on current texture
// ----------------------------------------------------------------------------
    render_to_texture {emboss_filter texture_width, texture_height}


sharpness ->
// ----------------------------------------------------------------------------
//    Apply sharpness filter to the current texture
// ----------------------------------------------------------------------------
    render_to_texture {sharpness_filter texture_width, texture_height}


laplacian ->
// ----------------------------------------------------------------------------
//   Apply a Laplacian filter to the current texture
// ----------------------------------------------------------------------------
    render_to_texture {laplacian_filter texture_width, texture_height}


erode x:real, y:real, threshold:real ->
// ----------------------------------------------------------------------------
//    Apply an erosion filter
// ----------------------------------------------------------------------------
    render_to_texture {erode_filter x, y, threshold}


black_and_white ->
// ----------------------------------------------------------------------------
//   Apply a black-and-white filter
// ----------------------------------------------------------------------------
    render_to_texture { black_and_white_filter }


sepia ->
// ----------------------------------------------------------------------------
//   Apply a Sepia filter
// ----------------------------------------------------------------------------
    render_to_texture { color "#E0C498"; black_and_white_filter }



// ============================================================================
//
//   Shadows
//
// ============================================================================

shadow_angle            -> 115.0
shadow_offset           -> 5.0
shadow_depth            -> 5.0
shadow_blur             -> 5.0
shadow_color            -> "black"
shadow_opacity          -> 0.75
shadow_filter_red       -> 0.0
shadow_filter_green     -> 0.0
shadow_filter_blue      -> 0.0
shadow_filter_alpha     -> 1.0

shadow_angle   A:real   -> shadow_angle   := A
shadow_offset  D:real   -> shadow_offset  := D
shadow_depth   Z:real   -> shadow_depth   := Z
shadow_blur    B:real   -> shadow_blur    := B
shadow_color   C:text   -> shadow_color   := C
shadow_opacity O:real   -> shadow_opacity := O
shadow_filter  R:real, G:real, B:real, A:real ->
    shadow_filter_red   := R
    shadow_filter_green := G
    shadow_filter_blue  := B
    shadow_filter_alpha := A

shadow_source           -> 0
shadow_texture          -> 0


shadow_scaled_texture W:real, H:real, S:real, Body ->
// ----------------------------------------------------------------------------
//   Render the shadow in a texture
// ----------------------------------------------------------------------------
    shadow_texture integer(W/S), integer(H/S),
        scale 1.0/S
        Body


shadow_texture W:integer, H:integer, Body ->
// ----------------------------------------------------------------------------
//   Render the shadow in a texture
// ----------------------------------------------------------------------------
    shadow_source := frame_texture (W, H, { blend_function "ONE", "ZERO"; Body})
    shadow_texture := render_to_texture
        shader_program
            vertex_shader <<
                void main(void)
                {
                    gl_Position = ftransform();
                    gl_FrontColor = gl_Color;
                    gl_BackColor = gl_Color;
                    gl_TexCoord[0] = gl_TextureMatrix[0] * gl_MultiTexCoord0;
                }
            >>
            fragment_shader <<
                uniform sampler2D texture;
                uniform vec4      filter;
                void main(void)
                {
                    vec2  pos    = gl_TexCoord[0].xy;
                    float shadow = dot(texture2D(texture, pos), filter);
                    gl_FragColor = shadow * gl_Color;
                }
            >>
        shader_set filter := shadow_filter_red, shadow_filter_green, shadow_filter_blue, shadow_filter_alpha
        color shadow_color, shadow_opacity
    if shadow_blur > 0.0 then
        gaussian integer(shadow_blur)


shadow X:real, Y:real, W:integer, H:integer, Body ->
// ----------------------------------------------------------------------------
//   Draw the Body with a drop shadow
// ----------------------------------------------------------------------------
    locally
        shadow_texture W, H, Body
        color "white"
        locally
            shadow_radians -> shadow_angle * pi / 180
            translate shadow_offset * sin shadow_radians, shadow_offset * cos shadow_radians, -shadow_depth
            rectangle X, Y, W, H
        texture shadow_source
        rectangle X, Y, W, H


// ============================================================================
//
//   Borders
//
// ============================================================================

fuzzy_border Ratio:real ->
// ----------------------------------------------------------------------------
//   Draw a fuzzy border around a picture
// ----------------------------------------------------------------------------
    render_to_texture
        fuzzy_border_ratio -> 0.0
        shader_program
            fragment_shader <<
                uniform sampler2D texture;
                uniform float     size;
                void main(void)
                {
                    vec2  pos    = gl_TexCoord[0].xy;
                    vec4 color   = texture2D(texture, pos);
                    float alpha  = smoothstep(0.0, size, pos.x)
                                 * smoothstep(0.0, size, pos.y)
                                 * (1.0-smoothstep(1.0-size, 1.0, pos.x))
                                 * (1.0-smoothstep(1.0-size, 1.0, pos.y));
                    gl_FragColor = vec4(color.rgb, color.a * alpha);
                }
            >>
        fuzzy_border_ratio := Ratio
        shader_set size := fuzzy_border_ratio


circle_fuzzy_border X:real, Y:real, Radius:real, Ratio:real ->
// ----------------------------------------------------------------------------
//   Draw a circular fuzzy border around a picture
// ----------------------------------------------------------------------------
    render_to_texture
        circle_fuzzy_border_ratio -> 0.0
        circle_fuzzy_border_radius -> 0.0
        circle_fuzzy_border_x -> 0.0
        circle_fuzzy_border_y -> 0.0
        shader_program
            fragment_shader <<
                uniform sampler2D texture;
                uniform float     size, radius, x, y;
                void main(void)
                {
                    vec2  pos    = gl_TexCoord[0].xy;
                    vec2  center = vec2(x, y);
                    vec4 color   = texture2D(texture, pos);
                    float dist   = length(pos - center);
                    float alpha  = 1.0-smoothstep(radius-size, radius,dist);
                    gl_FragColor = vec4(color.rgb, color.a * alpha);
                }
            >>
        circle_fuzzy_border_ratio := Ratio
        circle_fuzzy_border_radius := Radius
        circle_fuzzy_border_x := 0.5 * X + 0.5
        circle_fuzzy_border_y := 0.5 * Y + 0.5
        shader_set size := circle_fuzzy_border_ratio
        shader_set radius := circle_fuzzy_border_radius * 0.5
        shader_set x := circle_fuzzy_border_x
        shader_set y := circle_fuzzy_border_y



// ============================================================================
//
//   Render to Texture
//
// ============================================================================

render_to_texture Body ->
// ----------------------------------------------------------------------------
//   Render 'Body' into a new texture
// ----------------------------------------------------------------------------
//   We invoke an intermediate function to stash texture values in a closure

    render_to_texture_internal texture, texture_width, texture_height, Body


render_to_texture_internal T:integer, TW:integer, TH:integer, Body ->
// ----------------------------------------------------------------------------
//   Render 'Body' into a new texture - Helper function
// ----------------------------------------------------------------------------
//   Note that the texture is rendered in the current texture unit, but
//   that within the body of frame_texture, we render with a single
//   texture and map this unique texture to texture 0.

    frame_texture TW, TH,
        color "white"
        texture T
        blend_function "ONE", "ZERO"
        Body
        rectangle 0, 0, TW, TH
